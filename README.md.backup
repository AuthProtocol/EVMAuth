# EVMAuth - AI Agent Payment Platform

A modern Web3 dApp for managing and authorizing AI agent payments on Binance Smart Chain (BSC). Powered by Next.js 14, TypeScript, and RainbowKit.

![EVMAuth](https://img.shields.io/badge/Next.js-14-black?style=for-the-badge&logo=next.js)
![TypeScript](https://img.shields.io/badge/TypeScript-5.6-blue?style=for-the-badge&logo=typescript)
![Tailwind](https://img.shields.io/badge/Tailwind-3.4-38bdf8?style=for-the-badge&logo=tailwind-css)

## Two Deployment Modes

EVMAuth supports both mock and real blockchain modes:

### 📱 Mock Mode (`/dashboard`)
- Simulated blockchain interactions
- Auto-generated payments every 10 seconds
- Perfect for demos and development
- No wallet funding required

### ⛓️ Real Blockchain Mode (`/dashboard-real`)
- Full smart contract integration on BSC
- Real BNB transactions with Solidity contracts
- Production-ready payment system
- See [BLOCKCHAIN_SETUP.md](BLOCKCHAIN_SETUP.md) for deployment guide

## Features

### Core Functionality
- **AI Agent Management**: Create and manage multiple AI agents with configurable spending limits
- **Payment Authorization**: Authorize and track payments from AI agents to recipients
- **Real-time Activity Feed**: Live payment updates with auto-generated transactions
- **Wallet Integration**: Connect via RainbowKit with support for multiple wallets
- **Smart Contract Backend**: Solidity contracts for on-chain agent registry and payments
- **Mock Data System**: Complete simulation mode for testing (no real transactions)

### User Experience
- **Wallet-Gated Dashboard**: Secure access requiring wallet connection
- **Auto-settling Payments**: Pending payments automatically settle after 5 seconds
- **Agent Activation**: New agents auto-activate after 3 seconds
- **Live Stats**: Real-time statistics for agents, volume, and payments
- **Toast Notifications**: Instant feedback for all user actions
- **DID Copy Function**: One-click copy of Decentralized Identifiers

### Design & UI
- **Dark Theme**: Modern glassmorphism design with purple/blue gradients
- **Responsive Layout**: Mobile-first approach, works on all screen sizes
- **Smooth Animations**: Fade-in effects and hover states
- **Loading States**: Spinners for async operations
- **Empty States**: Helpful messages when no data available
- **Status Badges**: Color-coded indicators for payment and agent status

## Tech Stack

### Frontend
- **Next.js 14** (App Router) - React framework with server components
- **TypeScript** - Type-safe development
- **Tailwind CSS** - Utility-first styling

### Web3
- **wagmi v2** - React hooks for Ethereum
- **viem** - TypeScript Ethereum library
- **RainbowKit** - Wallet connection UI

### UI Components
- **Lucide React** - Beautiful icon library
- **Sonner** - Toast notifications

### Blockchain
- **Binance Smart Chain** (Mainnet & Testnet)
- **Solidity 0.8.24** - Smart contract development
- **Hardhat** - Ethereum development environment
- **DID Support** - Decentralized Identity (did:ethr format)

## Getting Started

### Prerequisites
- Node.js 18+ installed
- npm or yarn package manager
- WalletConnect Project ID (get one at https://cloud.walletconnect.com)

### Installation

1. **Clone the repository**
```bash
git clone https://github.com/yourusername/evmauth.git
cd evmauth
```

2. **Install dependencies**
```bash
npm install
# or
yarn install
```

3. **Set up environment variables**
```bash
cp .env.example .env
```

Edit `.env` and add your WalletConnect Project ID:
```env
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=your_project_id_here
```

4. **Run the development server**
```bash
npm run dev
# or
yarn dev
```

5. **Open your browser**
Navigate to [http://localhost:3000](http://localhost:3000)

## Project Structure

```
EVMAuth/
├── app/
│   ├── layout.tsx          # Root layout with providers
│   ├── providers.tsx       # Wagmi + RainbowKit setup
│   ├── page.tsx           # Landing page
│   ├── dashboard/
│   │   └── page.tsx       # Main dashboard
│   └── globals.css        # Global styles
├── components/
│   ├── navbar.tsx         # Navigation with wallet connect
│   ├── stats-card.tsx     # Statistics display card
│   ├── agent-card.tsx     # Agent information card
│   ├── payment-row.tsx    # Payment activity row
│   ├── create-agent-form.tsx      # Agent creation form
│   └── authorize-payment-form.tsx # Payment authorization form
├── lib/
│   ├── wagmi-config.ts    # Web3 configuration
│   ├── mock-data.ts       # Mock data generators
│   └── utils.ts           # Utility functions
└── public/                # Static assets
```

## Usage Guide

### Landing Page
1. View platform features and statistics
2. Click "Launch Dashboard" or connect wallet via navbar
3. Access GitHub repository

### Dashboard

#### Creating an Agent
1. Connect your wallet
2. Fill in the "Create Agent" form:
   - Agent Name (e.g., "Alpha Trader")
   - Agent Type (Trading Bot, Analytics, Content Creator, DeFi Automation)
   - Max Daily Spend in BNB
3. Click "Create Agent"
4. Agent appears with "pending" status
5. After 3 seconds, agent auto-activates

#### Authorizing a Payment
1. Ensure you have at least one active agent
2. Fill in the "Authorize Payment" form:
   - Select an active agent
   - Enter recipient address (0x...)
   - Enter amount in BNB
   - (Optional) Add a memo
3. Click "Authorize Payment"
4. Payment appears in activity feed with "pending" status
5. After 5 seconds, payment auto-settles

#### Viewing Activity
- **Stats Cards**: Top row shows live statistics
- **Your Agents**: Left column lists all created agents
- **Activity Feed**: Right column shows payment history
- **DID Copy**: Click copy icon on any agent to copy its DID

### Agent Types

| Type | Icon | Description | Color |
|------|------|-------------|-------|
| Trading Bot | 🤖 | Automated trading agents | Blue |
| Analytics | 📊 | Data analysis agents | Purple |
| Content Creator | ✍️ | Content generation agents | Pink |
| DeFi Automation | 💎 | DeFi protocol agents | Green |

## Blockchain Integration

### Smart Contract (`contracts/EVMAuth.sol`)

The EVMAuth smart contract provides:

- **Agent Registry**: On-chain storage of AI agent metadata
- **Payment Authorization**: Secure payment execution with owner verification
- **Daily Spend Limits**: Automatic 24-hour spending caps per agent
- **Event Emissions**: Complete audit trail of all actions

### Two Modes Available

#### 1. Mock Mode (Default)
The `/dashboard` route uses simulated data:
- No real blockchain transactions
- Auto-generated payments every 10 seconds
- Instant confirmations
- Perfect for demos and testing

#### 2. Real Blockchain Mode
The `/dashboard-real` route uses actual smart contracts:
- Real BNB transactions on BSC
- Gas fees apply
- Transaction confirmations required
- Production-ready

**To deploy the smart contract and use real blockchain mode:**
See [BLOCKCHAIN_SETUP.md](BLOCKCHAIN_SETUP.md) for complete deployment instructions.

## Configuration

### Supported Networks
The app is configured for BSC Mainnet and Testnet. To add more networks, edit `lib/wagmi-config.ts`:

```typescript
import { bsc, bscTestnet, polygon } from "wagmi/chains";

export const config = getDefaultConfig({
  chains: [bsc, bscTestnet, polygon], // Add more chains
  // ...
});
```

### Customizing Theme
Edit `app/globals.css` to modify colors and effects:

```css
.gradient-purple {
  background: linear-gradient(135deg, #9333ea 0%, #3b82f6 100%);
}
```

## Deployment

### Vercel (Recommended)

1. **Push to GitHub**
```bash
git add .
git commit -m "Initial commit"
git push origin main
```

2. **Import to Vercel**
   - Go to [vercel.com](https://vercel.com)
   - Click "New Project"
   - Import your repository
   - Add environment variable: `NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID`
   - Click "Deploy"

### Build Locally

```bash
npm run build
npm run start
```

### Other Platforms
The app can be deployed to any platform supporting Next.js:
- Netlify
- Cloudflare Pages
- AWS Amplify
- Railway

## Development

### Adding New Features

**Add a new agent type:**
1. Update `AgentType` in `lib/mock-data.ts`
2. Add entry to `AGENT_TYPES` object
3. Update form select options

**Add new payment status:**
1. Update `PaymentStatus` type
2. Add to `statusConfig` in `payment-row.tsx`
3. Update status badges

**Customize auto-generation:**
Edit intervals in `app/dashboard/page.tsx`:
```typescript
// Change payment generation interval (default: 10s)
setInterval(() => {
  const newPayment = generateMockPayment();
  setPayments((prev) => [newPayment, ...prev]);
}, 10000); // Change this value
```

### Code Quality

**Run linter:**
```bash
npm run lint
```

**Type checking:**
```bash
npx tsc --noEmit
```

## Troubleshooting

### Wallet won't connect
- Ensure WalletConnect Project ID is set in `.env`
- Check browser console for errors
- Try clearing browser cache
- Update your wallet extension

### Styles not loading
- Ensure Tailwind is properly configured
- Run `npm install` again
- Clear `.next` folder: `rm -rf .next`

### Build errors
- Update dependencies: `npm update`
- Check Node.js version (18+ required)
- Remove `node_modules` and reinstall

## Performance

- **Lighthouse Score**: 95+ (Desktop)
- **Bundle Size**: ~250KB (gzipped)
- **First Load**: <2s on 3G
- **Time to Interactive**: <3s

## Security

⚠️ **Important**: This is a demonstration application with mock data.

For production use:
- Implement proper authentication
- Add rate limiting
- Validate all inputs server-side
- Use environment variables for sensitive data
- Add CSRF protection
- Implement proper error handling
- Add transaction verification

## Browser Support

- Chrome 90+
- Firefox 88+
- Safari 14+
- Edge 90+

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- [Next.js](https://nextjs.org/)
- [wagmi](https://wagmi.sh/) and [RainbowKit](https://www.rainbowkit.com/)
- [Lucide](https://lucide.dev/)
- [Tailwind CSS](https://tailwindcss.com/)

## Support

For support, please open an issue on GitHub.

---

**Open source for the Web3 community**
